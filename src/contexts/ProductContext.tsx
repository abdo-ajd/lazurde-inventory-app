// src/contexts/ProductContext.tsx
"use client";

import type { Product } from '@/lib/types';
import { createContext, useContext, ReactNode, useCallback } from 'react';
import { useLocalStorage } from '@/hooks/useLocalStorage';
import { LOCALSTORAGE_KEYS, INITIAL_PRODUCTS } from '@/lib/constants';
import { useToast } from '@/hooks/use-toast';

type ProductUpdatePayload = Partial<Pick<Product, "name" | "price" | "quantity" | "imageUrl" | "barcodeValue">>;

interface ProductContextType {
  products: Product[];
  addProduct: (productData: Omit<Product, 'id' | 'createdAt' | 'updatedAt'>) => Promise<Product | null>;
  updateProduct: (productId: string, updates: ProductUpdatePayload) => Promise<Product | null>;
  deleteProduct: (productId: string) => Promise<boolean>;
  getProductById: (productId: string) => Product | undefined;
  getProductByBarcode: (barcodeValue: string) => Product | undefined;
  updateProductQuantity: (productId: string, quantityChange: number) => Promise<boolean>;
  replaceAllProducts: (newProducts: Product[]) => void; // Added for backup/restore
}

const ProductContext = createContext<ProductContextType | undefined>(undefined);

export const ProductProvider = ({ children }: { children: ReactNode }) => {
  const initialProductsCreator = useCallback(() => INITIAL_PRODUCTS, []);
  const [products, setProducts] = useLocalStorage<Product[]>(LOCALSTORAGE_KEYS.PRODUCTS, initialProductsCreator);
  const { toast } = useToast();

  const addProduct = async (productData: Omit<Product, 'id' | 'createdAt' | 'updatedAt'>): Promise<Product | null> => {
    const currentProducts = products || [];

    if (currentProducts.find(p => p.name.trim().toLowerCase() === productData.name.trim().toLowerCase())) {
      toast({ title: "خطأ", description: "منتج بنفس الاسم موجود بالفعل.", variant: "destructive" });
      return null;
    }
    
    const productIdTimestamp = Date.now();
    const generatedProductId = `prod_${productIdTimestamp}`;
    const autoGeneratedBarcodeValue = productData.barcodeValue && productData.barcodeValue.trim() !== '' 
      ? productData.barcodeValue.trim() 
      : String(productIdTimestamp);

    const newProductToAdd: Product = {
      ...productData,
      id: generatedProductId,
      imageUrl: productData.imageUrl || '',
      barcodeValue: autoGeneratedBarcodeValue,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    setProducts(prevProducts => [...(prevProducts || []), newProductToAdd]);
    
    toast({ title: "نجاح", description: `تمت إضافة المنتج "${newProductToAdd.name}" بنجاح.` });
    return newProductToAdd;
  };

  const updateProduct = async (productId: string, updates: ProductUpdatePayload): Promise<Product | null> => {
    const currentProducts = products || [];
    const productIndex = currentProducts.findIndex(p => p.id === productId);

    if (productIndex === -1) {
      toast({ title: "خطأ", description: "المنتج غير موجود لتحديثه.", variant: "destructive" });
      return null;
    }

    const originalProduct = currentProducts[productIndex];

    // Check for name conflict if name is being updated and is different from original
    if (updates.name && updates.name.trim().toLowerCase() !== originalProduct.name.trim().toLowerCase()) {
      if (currentProducts.some(p => p.id !== productId && p.name.trim().toLowerCase() === updates.name!.trim().toLowerCase())) {
        toast({ title: "خطأ", description: "منتج آخر بنفس الاسم الجديد موجود بالفعل.", variant: "destructive" });
        return originalProduct; // Return original product as no update was made
      }
    }
    
    let productAfterUpdate: Product | null = null;

    setProducts(prev => {
      const updatedList = (prev || []).map(p => {
        if (p.id === productId) {
          productAfterUpdate = {
            ...p,
            ...updates,
            updatedAt: new Date().toISOString(),
          };
          return productAfterUpdate;
        }
        return p;
      });
      return updatedList;
    });

    // Check if an actual update was made to show toast
    if (productAfterUpdate) {
        // To determine if a meaningful change occurred for the toast, compare original with updates.
        // This check is simplified; a more robust one would compare originalProduct against productAfterUpdate sans updatedAt.
        const meaningfulChange = Object.keys(updates).some(key => {
            const K = key as keyof ProductUpdatePayload;
            return updates[K] !== undefined && originalProduct[K] !== updates[K];
        });

        if (meaningfulChange || originalProduct.updatedAt !== productAfterUpdate.updatedAt) {
             toast({ title: "نجاح", description: `تم تحديث المنتج "${productAfterUpdate.name}".` });
        }
        return productAfterUpdate;
    }
    
    return null; // Should ideally not be reached if product was found
  };

  const deleteProduct = async (productId: string): Promise<boolean> => {
    const currentProducts = products || [];
    const productToDelete = currentProducts.find(p => p.id === productId);
    if (!productToDelete) {
      toast({ title: "خطأ", description: "المنتج غير موجود.", variant: "destructive" });
      return false;
    }
    setProducts(prevProducts => (prevProducts || []).filter(p => p.id !== productId));
    // Toast for delete is usually handled in the component calling deleteProduct after success.
    return true;
  };

  const getProductById = (productId: string): Product | undefined => {
    return (products || []).find(p => p.id === productId);
  };

  const getProductByBarcode = (barcodeValue: string): Product | undefined => {
    return (products || []).find(p => p.barcodeValue === barcodeValue);
  };

  const updateProductQuantity = async (productId: string, quantityChange: number): Promise<boolean> => {
    const product = getProductById(productId);
    if (!product) {
      // toast({ title: "خطأ", description: "المنتج غير موجود.", variant: "destructive" }); // Toast can be too noisy here
      return false;
    }
    const newQuantity = product.quantity + quantityChange;
    if (newQuantity < 0) {
      // toast({ title: "خطأ", description: `لا توجد كمية كافية من المنتج "${product.name}". الكمية المتوفرة: ${product.quantity}`, variant: "destructive" });
      return false;
    }
    
    // Calling the refined updateProduct. Pass only quantity.
    const result = await updateProduct(productId, { quantity: newQuantity });
    return !!result; // Returns true if updateProduct succeeded (returned a product)
  };

  const replaceAllProducts = (newProducts: Product[]): void => {
    setProducts(newProducts);
  };

  return (
    <ProductContext.Provider value={{ products: products || [], addProduct, updateProduct, deleteProduct, getProductById, getProductByBarcode, updateProductQuantity, replaceAllProducts }}>
      {children}
    </ProductContext.Provider>
  );
};

export const useProducts = () => {
  const context = useContext(ProductContext);
  if (context === undefined) {
    throw new Error('useProducts must be used within a ProductProvider');
  }
  return context;
};

