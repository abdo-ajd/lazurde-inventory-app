
// src/app/dashboard/products/[id]/page.tsx
"use client";

import { useState, useEffect, useMemo, useRef } from 'react';
import Image from 'next/image';
import JsBarcode from 'jsbarcode';
import { useProducts } from '@/contexts/ProductContext';
import { useParams, useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowRight, Edit3, Package, Tag, DollarSign, Layers, CalendarDays, History, Trash2, ShoppingBag, Printer, Loader2, Archive, TrendingUp } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import type { Product } from '@/lib/types';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription as ShadcnDialogDescription, DialogFooter, DialogClose, DialogTrigger } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { useSales } from '@/contexts/SalesContext';
import { useProductImage } from '@/hooks/useProductImage'; // Import the hook

export default function ProductDetailsPage() {
  const { getProductById, deleteProduct } = useProducts();
  const { sales } = useSales();
  const params = useParams();
  const router = useRouter();
  const { hasRole } = useAuth();
  const { toast } = useToast();
  const [product, setProduct] = useState<Product | null | undefined>(undefined);
  const [isFetchingProduct, setIsFetchingProduct] = useState(true); // Renamed from isFetching
  const [isDeleting, setIsDeleting] = useState(false);
  const barcodeRef = useRef<SVGSVGElement>(null);

  const productId = typeof params.id === 'string' ? params.id : '';

  // Use the hook for the product image
  const { imageUrl: resolvedProductImageUrl, isLoading: isImageLoading } = useProductImage(product?.id, product?.imageUrl);


  useEffect(() => {
    if (productId) {
      const fetchedProduct = getProductById(productId);
      setProduct(fetchedProduct);
    }
    setIsFetchingProduct(false);
  }, [productId, getProductById]);

  useEffect(() => {
    if (product && product.barcodeValue && barcodeRef.current) {
      try {
        const valueToEncode = product.barcodeValue;
        let textForDisplay = product.barcodeValue;

        if (product.id.startsWith('prod_') && product.barcodeValue === product.id.substring(5)) {
          // It's an auto-generated barcode based on product ID suffix.
          // For display text, use the numeric part and remove leading zeros.
          const autoGeneratedSuffix = product.id.substring(5);
          textForDisplay = autoGeneratedSuffix.replace(/^0+/, '');
          if (textForDisplay === '') { // If it was all zeros (e.g., "0", "00")
            textForDisplay = '0'; // Display a single zero
          }
        }
        // For manually entered barcodes, textForDisplay remains product.barcodeValue for JsBarcode's default handling.

        JsBarcode(barcodeRef.current, valueToEncode, {
          format: "CODE128",
          displayValue: true, // Ensure space for text is allocated
          text: textForDisplay, // Explicitly set the text to be displayed
          fontSize: 14,
          textMargin: 4,
          margin: 10,
          height: 60,
          width: 2,
        });
      } catch (e) {
        console.error("Barcode generation failed:", e);
        toast({ variant: "destructive", title: "فشل توليد الباركود", description: "حدث خطأ أثناء محاولة إنشاء الباركود." });
      }
    }
  }, [product, toast]);

  const quantitySold = useMemo(() => {
    if (!product || !sales) return 0;
    return sales.reduce((total, sale) => {
      if (sale.status === 'active') {
        sale.items.forEach(item => {
          if (item.productId === product.id) {
            total += item.quantity;
          }
        });
      }
      return total;
    }, 0);
  }, [product, sales]);

  const handleDeleteProduct = async () => {
    if (!product) return;
    setIsDeleting(true);
    const success = await deleteProduct(product.id);
    setIsDeleting(false);
    if (success) {
      toast({title: "تم الحذف", description: `تم حذف المنتج "${product.name}" بنجاح.`});
      router.push('/dashboard/products');
    }
  };

  const handlePrintBarcode = () => {
    if (!barcodeRef.current || !product || !product.barcodeValue) return;
    const svgString = new XMLSerializer().serializeToString(barcodeRef.current);
    const printWindow = window.open('', '_blank', 'height=250,width=350'); 
    if (printWindow) {
        printWindow.document.write('<html><head><title>طباعة باركود المنتج</title>');
        const styleContent =
            '<style>' +
            'body { margin: 5mm; font-family: "Arial", sans-serif; text-align: center; display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 10mm); overflow: hidden;}' +
            '.barcode-area { display: inline-block; padding: 1mm; border: 0.5px dashed #ccc; width: 98%; max-width: 60mm;}' + 
            '.product-name-print { font-size: 10pt; margin-bottom: 0.5mm; font-weight: bold; word-break: break-word; }' + 
            'svg { width: 100% !important; height: auto !important; max-height: 30mm; }' + 
            '@media print { body { margin: 0; padding: 0; width: 100%; height: 100%; } .barcode-area { border: none; padding:0; margin: 0 auto; page-break-after: always; width: 100%; }}' +
            '</style>';
        printWindow.document.write(styleContent);
        printWindow.document.write('</head><body>');
        printWindow.document.write('<div class="barcode-area">');
        if (product.name) {
            printWindow.document.write(`<div class="product-name-print">${product.name}</div>`);
        }
        printWindow.document.write(svgString);
        printWindow.document.write('</div>');
        printWindow.document.write('</body></html>');
        printWindow.document.close();
        printWindow.onload = function() {
            printWindow.focus();
            printWindow.print();
        };
    } else {
        toast({
            variant: "destructive",
            title: "فشل الطباعة",
            description: "لم يتمكن المتصفح من فتح نافذة الطباعة. يرجى التحقق من إعدادات مانع النوافذ المنبثقة."
        });
    }
  };


  if (isFetchingProduct) {
    return (
      <div className="space-y-6 p-4 md:p-6">
        <Skeleton className="h-10 w-3/4 md:w-1/2" /> 
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="md:col-span-1">
            <Skeleton className="h-80 w-full rounded-lg" /> 
            <Skeleton className="h-5 w-4/5 mt-2 mx-auto rounded-md" /> 
          </div>
          <div className="md:col-span-2">
            <Card className="shadow-lg h-full">
              <CardHeader className="p-6">
                <Skeleton className="h-8 w-4/5 rounded-md" /> 
              </CardHeader>
              <CardContent className="space-y-4 p-6">
                {[...Array(3)].map((_, i) => ( 
                  <Skeleton key={i} className="h-12 w-full rounded-md" />
                ))}
                 <div className="grid grid-cols-2 gap-4 mt-4">
                    {[...Array(4)].map((_, i) => (
                    <div key={i} className="space-y-1.5">
                        <Skeleton className="h-5 w-1/3 rounded-md" />
                        <Skeleton className="h-6 w-2/3 rounded-md" />
                    </div>
                    ))}
                </div>
              </CardContent>
              <CardFooter className="p-6 gap-3">
                <Skeleton className="h-10 w-28 rounded-md" />
                <Skeleton className="h-10 w-28 rounded-md" />
              </CardFooter>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="text-center py-16">
        <Package size={64} className="mx-auto text-muted-foreground mb-6" /> 
        <h1 className="text-3xl font-bold mb-3">المنتج غير موجود</h1> 
        <p className="text-base text-muted-foreground mb-8">عذرًا، لم نتمكن من العثور على المنتج الذي طلبته.</p> 
        <Button size="lg" asChild> 
          <Link href="/dashboard/products">
            <span className="flex items-center">
                 <ArrowRight className="ml-2 h-5 w-5" />
                العودة إلى قائمة المنتجات
            </span>
          </Link>
        </Button>
      </div>
    );
  }

  const formatDateTime = (isoString: string) => {
    if (!isoString) return 'N/A';
    try {
      return new Intl.DateTimeFormat('en-GB', {
        year: 'numeric', month: 'numeric', day: 'numeric',
        hour: 'numeric', minute: 'numeric',
        hour12: true
      }).format(new Date(isoString));
    } catch (e) {
      return 'Invalid Date';
    }
  };

  const profit = product.price - (product.costPrice || 0);

  return (
    <div className="space-y-6 p-4 md:p-6">
        <div className="flex justify-between items-center">
            <div>
                <h1 className="text-xl font-bold tracking-tight font-headline flex items-center"> 
                    <Package className="mr-2 text-primary" size={20} /> {product.name} 
                </h1>
                <p className="text-xs text-muted-foreground font-body mt-0.5"> 
                تفاصيل المنتج الكاملة.
                </p>
            </div>
             <Button variant="outline" size="sm" asChild className="h-8 px-2.5 text-xs"> 
                <Link href="/dashboard/products">
                  <span className="flex items-center">
                    <ArrowRight className="ml-1 h-3.5 w-3.5" /> 
                    للقائمة
                  </span>
                </Link>
            </Button>
        </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-1">
           <Card className="shadow-sm overflow-hidden">
             <CardHeader className="p-0 relative aspect-[3/4] w-full">
                {isImageLoading ? (
                    <div className="w-full h-full flex items-center justify-center bg-muted">
                        <Loader2 className="h-10 w-10 animate-spin text-primary" />
                    </div>
                ) : (
                    <Image
                        src={resolvedProductImageUrl || 'https://placehold.co/300x400.png'}
                        alt={product.name}
                        layout="fill"
                        objectFit="cover"
                        data-ai-hint="abaya product detail"
                        key={resolvedProductImageUrl || product.id} // Add key to force re-render if URL changes
                    />
                )}
             </CardHeader>
             <CardContent className="p-2"> 
                <h3 className="font-semibold text-sm text-center truncate" title={product.name}>{product.name}</h3> 
             </CardContent>
           </Card>
        </div>

        <div className="md:col-span-2">
            <Card className="shadow-lg h-full"> 
                <CardHeader className="pb-4 pt-6 px-6">  
                <CardTitle className="flex items-center text-xl"> 
                    <Tag className="mr-2.5 text-accent h-6 w-6" /> 
                    معلومات المنتج
                </CardTitle>
                </CardHeader>

                <div className="px-6 pb-4 flex flex-col items-center mb-4"> 
                  {product.barcodeValue ? (
                    <>
                      <svg ref={barcodeRef} className="w-full max-w-[240px] h-auto mb-3"></svg>  
                      <div className="flex gap-3 mt-1.5"> 
                        <Button variant="outline" size="default" onClick={handlePrintBarcode} className="h-10 px-4 text-sm"> 
                            <Printer className="ml-2 h-4.5 w-4.5" /> طباعة 
                        </Button>
                        {hasRole(['admin']) && (
                          <Button variant="outline" size="default" asChild className="h-10 px-4 text-sm"> 
                            <Link href={`/dashboard/products/${product.id}/edit`}>
                              <span className="flex items-center">
                                <Edit3 className="ml-2 h-4.5 w-4.5" /> تعديل 
                               </span>
                            </Link>
                          </Button>
                        )}
                      </div>
                    </>
                  ) : (
                    <div className="text-center py-3"> 
                      <p className="text-base text-muted-foreground mb-2">لم يتم تعيين باركود.</p> 
                      {hasRole(['admin']) && (
                        <Button variant="outline" size="default" asChild className="h-10 px-4 text-sm"> 
                          <Link href={`/dashboard/products/${product.id}/edit`}>
                            <span className="flex items-center">
                                <Edit3 className="ml-2 h-4.5 w-4.5" /> إضافة/تعديل 
                            </span>
                          </Link>
                        </Button>
                      )}
                    </div>
                  )}
                </div>

                <CardContent className="grid gap-5 sm:grid-cols-2 pt-4 px-6 pb-6"> 
                    <div className="flex items-start space-x-3 space-x-reverse"> 
                        <DollarSign className="h-5 w-5 mt-1 text-primary shrink-0" /> 
                        <div>
                        <p className="text-base text-muted-foreground">سعر البيع</p> 
                        <p className="font-semibold text-lg">{product.price === 0 ? 'لم يحدد السعر' : `${product.price.toFixed(2)} LYD`}</p> 
                        </div>
                    </div>
                    <div className="flex items-start space-x-3 space-x-reverse">
                        <Layers className="h-5 w-5 mt-1 text-primary shrink-0" />
                        <div>
                        <p className="text-base text-muted-foreground">الكمية المتوفرة</p>
                        <Badge variant={product.quantity === 0 ? "destructive" : product.quantity < 10 ? "secondary" : "default"} className="text-sm px-2.5 py-1 font-medium"> 
                            {product.quantity}
                        </Badge>
                        </div>
                    </div>
                    <div className="flex items-start space-x-3 space-x-reverse">
                        <ShoppingBag className="h-5 w-5 mt-1 text-primary shrink-0" />
                        <div>
                        <p className="text-base text-muted-foreground">الكمية المباعة</p>
                        <p className="font-semibold text-lg">{quantitySold}</p>
                        </div>
                    </div>
                    
                    {hasRole(['admin']) && (
                        <>
                        <div className="flex items-start space-x-3 space-x-reverse"> 
                            <Archive className="h-5 w-5 mt-1 text-primary shrink-0" /> 
                            <div>
                            <p className="text-base text-muted-foreground">سعر التكلفة</p> 
                            <p className="font-semibold text-lg">{product.costPrice ? `${product.costPrice.toFixed(2)} LYD` : 'لم يحدد'}</p> 
                            </div>
                        </div>
                        <div className="flex items-start space-x-3 space-x-reverse">
                            <TrendingUp className="h-5 w-5 mt-1 text-green-600 shrink-0" />
                            <div>
                            <p className="text-base text-muted-foreground">المكسب</p>
                            <p className={`font-semibold text-lg ${profit >= 0 ? 'text-green-600' : 'text-destructive'}`}>{`${profit.toFixed(2)} LYD`}</p>
                            </div>
                        </div>
                        </>
                    )}
                    <div className="flex items-start space-x-3 space-x-reverse">
                        <CalendarDays className="h-5 w-5 mt-1 text-primary shrink-0" />
                        <div>
                        <p className="text-base text-muted-foreground">تاريخ الإنشاء</p>
                        <p className="font-semibold text-base">{formatDateTime(product.createdAt)}</p> 
                        </div>
                    </div>
                    <div className="flex items-start space-x-3 space-x-reverse">
                        <History className="h-5 w-5 mt-1 text-primary shrink-0" />
                        <div>
                        <p className="text-base text-muted-foreground">آخر تحديث</p>
                        <p className="font-semibold text-base">{formatDateTime(product.updatedAt)}</p>
                        </div>
                    </div>
                </CardContent>
                {hasRole(['admin']) && (
                <CardFooter className="flex justify-start gap-3 p-6 pt-4"> 
                    <Button size="default" asChild className="h-10 px-4 text-sm"> 
                      <Link href={`/dashboard/products/${product.id}/edit`}>
                          <span className="flex items-center">
                            <Edit3 className="ml-2 h-4.5 w-4.5" /> تعديل 
                          </span>
                      </Link>
                    </Button>
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="destructive" size="default" className="h-10 px-4 text-sm" disabled={isDeleting}> 
                          <Trash2 className="ml-2 h-4.5 w-4.5" /> {isDeleting ? '...' : 'حذف'} 
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="sm:max-w-lg"> 
                        <DialogHeader>
                          <DialogTitle className="text-xl">تأكيد الحذف</DialogTitle> 
                          <ShadcnDialogDescription className="text-base pt-1"> 
                            هل أنت متأكد أنك تريد حذف المنتج "{product.name}"؟ لا يمكن التراجع عن هذا الإجراء.
                          </ShadcnDialogDescription>
                        </DialogHeader>
                        <DialogFooter className="gap-3 sm:justify-start pt-2">
                          <DialogClose asChild>
                            <Button type="button" variant="secondary" size="default" className="h-10 px-4 text-sm" disabled={isDeleting}>إلغاء</Button> 
                          </DialogClose>
                          <Button type="button" variant="destructive" size="default" className="h-10 px-4 text-sm" onClick={handleDeleteProduct} disabled={isDeleting}> 
                            {isDeleting ? '...' : 'حذف'}
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                </CardFooter>
                )}
            </Card>
        </div>
      </div>
    </div>
  );
}
